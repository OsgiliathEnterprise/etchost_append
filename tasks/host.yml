---

- name: Host | Remove ip and hostname in hostfile if flag is set and hostname is the unique entry {{ hostname }}
  ansible.builtin.replace:
    path: /etc/hosts
    regexp: '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s{{ hostname.replace("\.", "\\.") }}$'
    replace: ''
  when:
    - replace is defined
    - replace
  become: yes

- name: Host | check ip is in hostfile {{ ip }}
  ansible.builtin.shell: >
    set -o pipefail &&
    cat /etc/hosts | grep -Ec '{{ ip.replace('\.', '\\.') }}\s+'
  register: hosts_ip_entry_exists
  ignore_errors: true
  failed_when: false
  changed_when: false

- name: Host | Remove hostname in hostfile if flag is set
  ansible.builtin.replace:
    path: /etc/hosts
    regexp: '^(.*)\s+{{ hostname.replace("\.", "\\.") }}(.*)$'
    replace: '\1\2'
  when:
    - replace is defined
    - replace
  become: yes

- name: Host | check ip and hostname is in hostfile
  ansible.builtin.shell: >
    set -o pipefail &&
    cat /etc/hosts | grep -Ec '{{ ip.replace('\.', '\\.') }}\s.*{{ hostname.replace('\.', '\\.') }}'
  register: hosts_entry_exists
  ignore_errors: true
  failed_when: false
  changed_when: false

- name: "Host | add host in hosts file if ip entry exists and hostname not present {{ hostname }}"
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: '^{{ ip.replace("\.", "\\.") }}\s(.*)$'
    backrefs: yes
    line: '{{ ip }} {{ hostname }} \1'
    owner: root
    group: root
    mode: '0644'
  become: true
  changed_when: false
  # IPV6 have tendency to add some new entries every time
  when:
    - hosts_ip_entry_exists.rc == 0
    - hosts_ip_entry_exists.stdout != 0
    - hosts_entry_exists.rc == 1 or hosts_entry_exists.stdout == 0

- name: "Host | add host in hosts file if ip_entry does not exist {{ hostname }}"
  ansible.builtin.lineinfile:
    path: /etc/hosts
    insertbefore: BOF
    line: '{{ ip }} {{ hostname }}'
    owner: root
    group: root
    mode: '0644'
  become: true
  changed_when: false
  # IPV6 have tendency to add some new entries every time
  when:
    - hosts_ip_entry_exists.rc == 1 or hosts_ip_entry_exists.stdout == 0
    - hosts_entry_exists.rc == 1 or hosts_entry_exists.stdout == 0
    - ansible_facts['virtualization_type'] is not defined or ansible_facts['virtualization_type'] not in ['container']
